{"version":3,"file":"static/js/358.1fd9703f.chunk.js","mappings":"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","sources":["common/AddForm/type.ts","common/AddForm/index.tsx","common/AddForm/style.ts"],"sourcesContent":["import { UseFormRegister, UseFormSetValue } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\n\r\nexport const schema = yup\r\n  .object({\r\n    firstName: yup.string().required(),\r\n    lastName: yup.string().required(),\r\n    age: yup.string().required(),\r\n    gender: yup.string().required(),\r\n    state: yup.string(),\r\n    lga: yup.string(),\r\n    hair: yup.string(),\r\n    complexion: yup.string(),\r\n    build: yup.string(),\r\n    foundAd: yup.string(),\r\n    missingAd: yup.string(),\r\n  })\r\n  .required();\r\n\r\nexport const telRegex = /^([0]{1})[0-9]{10}$/;\r\n\r\nexport type FormAddProp = {\r\n  firstName: string;\r\n  lastName: string;\r\n  middleName: string;\r\n  age: string;\r\n  gender: string;\r\n  complexion: string;\r\n  hair: string;\r\n  build: string;\r\n  foundAd: string;\r\n  missingAd: string;\r\n};\r\n\r\n// skin-type sorting\r\nexport const skinColor = [\"Dark\", \"Fair\", \"Very dark\", \"Very fair\"].sort(\r\n  (a, b) => (a > b ? 1 : -1),\r\n);\r\n\r\nexport const foundInputValue = [\"Found Dead Body\", \"Found Missing Person\"];\r\n\r\n// hair-type sorting\r\nexport const hairType = [\r\n  \"Side burns\",\r\n  \"Normal grey\",\r\n  \"Normal black\",\r\n  \"Bald full\",\r\n  \"Hair curly/wavy\",\r\n  \"Hair bleached/dyed\",\r\n  \"Bald partial\",\r\n  \"Long hair\",\r\n  \"Straight hair\",\r\n  \"White hair\",\r\n  \"Normal black/grey\",\r\n  \"Wig use\",\r\n  \"Short hair\",\r\n].sort((a, b) => (a > b ? 1 : -1));\r\n\r\n// body-type sorting\r\nexport const bodyType = [\r\n  \"Normal (muscular)\",\r\n  \"Stocky\",\r\n  \"Thin (lanky)\",\r\n  \"Handicapped\",\r\n  \"Fat (stout/strong)\",\r\n].sort((a, b) => (a > b ? 1 : -1));\r\n\r\nexport type PropTran = {\r\n  reference: string;\r\n  status: string;\r\n  trans: string;\r\n  message: string;\r\n  transacton: string;\r\n};\r\n\r\nexport type FasProp = {\r\n  imageA: string;\r\n  foundPersonType?: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  middleName: string;\r\n  gender: string;\r\n  height: string;\r\n  weight: string;\r\n  age: string;\r\n  skin: string;\r\n  hair: string;\r\n  body: string;\r\n  personAd: string;\r\n  personSt: string;\r\n  personLga: string;\r\n  father: string;\r\n  mother: string;\r\n  sibling: string;\r\n  parentAd: string;\r\n  issueDate: string;\r\n  issueState: string;\r\n  issueLga: string;\r\n  issueAd: string;\r\n  poName: string;\r\n  poState: string;\r\n  poLga: string;\r\n  poAd: string;\r\n  poNumber: string;\r\n  caseNumber: string;\r\n  stationNumber: string;\r\n  dateReport: string;\r\n  posterFirstName: string;\r\n  posterLastName: string;\r\n  posterRelationship: string;\r\n  posterEmail: string;\r\n  posterOTP: string;\r\n};\r\n\r\nexport type FormPageProp = {\r\n  formType: string;\r\n  formData: FasProp;\r\n  register: UseFormRegister<FasProp>;\r\n  setValue: UseFormSetValue<FasProp>;\r\n  isLoading: boolean;\r\n  onOpen: () => void;\r\n  ImageURLs: string[];\r\n  onImageChange(e: {\r\n    target: {\r\n      files: any;\r\n    };\r\n  }): void;\r\n};\r\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Input, Select, Spinner } from \"@chakra-ui/react\";\r\nimport FormField from \"common/FormField\";\r\nimport FormAddBox, { ButtonStyled } from \"./style\";\r\nimport {\r\n  bodyType,\r\n  FormPageProp,\r\n  hairType,\r\n  skinColor,\r\n  foundInputValue,\r\n} from \"./type\";\r\nimport AuthContext from \"contexts/AuthProvider\";\r\nimport dataNig from \"../../utils/states_and_lgas.json\";\r\nimport { toast } from \"react-toastify\";\r\nimport toastOptions from \"hooks/toast\";\r\nimport { postRequest } from \"utils/apiCall\";\r\nimport { useMutation } from \"@tanstack/react-query\";\r\nimport { OTP_ROUTE } from \"utils/Api-Routes\";\r\n\r\nfunction AddFormPage({\r\n  formType,\r\n  formData,\r\n  register,\r\n  isLoading: btnLoading,\r\n  onOpen,\r\n  onImageChange,\r\n  ImageURLs,\r\n}: FormPageProp) {\r\n  const { authUser } = useContext(AuthContext);\r\n  const [arrivedOTP, setArrivedOTP] = useState(\"\");\r\n\r\n  // conditions for button disable\r\n  const btnCondition =\r\n    !formData.posterOTP && authUser?.transaction?.status !== \"success\";\r\n\r\n  const btnConditionB = !formData.posterOTP;\r\n\r\n  // LGA\r\n  const stateLGA = dataNig.find(\r\n    select =>\r\n      select.state === formData.issueState ||\r\n      select.state === formData.personSt ||\r\n      select.state === formData.poState,\r\n  );\r\n\r\n  // sort dataNig\r\n  const givenState = dataNig.sort((a, b) => (a.state > b.state ? 1 : -1));\r\n\r\n  const { mutate, isLoading } = useMutation(postRequest, {\r\n    onSuccess(res) {\r\n      toast.success(res?.message, toastOptions);\r\n      setArrivedOTP(res?.allowOTPCode);\r\n    },\r\n    onError(err: any) {\r\n      toast.error(err?.message, toastOptions);\r\n    },\r\n  });\r\n\r\n  const handleOTP = () => {\r\n    const phoneEmail = authUser?.user?.email;\r\n    if (phoneEmail === \"\") {\r\n      return toast.error(\"Please enter your registerd email\", toastOptions);\r\n    }\r\n    mutate({ data: { phoneEmail: phoneEmail }, url: OTP_ROUTE });\r\n  };\r\n\r\n  return (\r\n    <FormAddBox>\r\n      <div className=\"formWrapper\">\r\n        {/**Payment*/}\r\n        {formType === \"found\" ? (\r\n          <div className=\"person_type\">\r\n            <FormField label=\"Found Person Type\">\r\n              <Select\r\n                placeholder=\"Please Select\"\r\n                {...register(\"foundPersonType\")}\r\n              >\r\n                {foundInputValue.map(inputValue => (\r\n                  <option value={inputValue} key={inputValue}>\r\n                    {inputValue}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormField>\r\n          </div>\r\n        ) : null}\r\n\r\n        {/**Victim Bio */}\r\n        <div className=\"boxname\">\r\n          <div>\r\n            <FormField label=\"First Name\">\r\n              <Input {...register(\"firstName\")} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Middle Name\">\r\n              <Input {...register(\"middleName\")} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Last Name\">\r\n              <Input {...register(\"lastName\")} />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"personbox\">\r\n          <div>\r\n            <FormField label=\"Gender\">\r\n              <Input {...register(\"gender\")} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Height\">\r\n              <Input {...register(\"height\")} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Weight\">\r\n              <Input {...register(\"weight\")} />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"dropbox\">\r\n          <div>\r\n            <FormField label=\"Complexion\">\r\n              <Select placeholder=\"Please Select\" {...register(\"skin\")}>\r\n                {skinColor.map(color => (\r\n                  <option value={color} key={color}>\r\n                    {color}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Hair\">\r\n              <Select placeholder=\"Please Select\" {...register(\"hair\")}>\r\n                {hairType.map(ht => (\r\n                  <option value={ht} key={ht}>\r\n                    {ht}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Build\">\r\n              <Select placeholder=\"Please Select\" {...register(\"body\")}>\r\n                {bodyType.map(gh => (\r\n                  <option value={gh} key={gh}>\r\n                    {gh}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n\r\n        {/**Victim Address */}\r\n        <div className=\"person_ad_box\">\r\n          <div>\r\n            <FormField label=\"Person Address\">\r\n              <Input {...register(\"personAd\")} />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"person_st_box\">\r\n          <div>\r\n            <FormField label=\"Age\">\r\n              <Input {...register(\"age\")} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"State\">\r\n              <Select placeholder=\"Select State\" {...register(\"personSt\")}>\r\n                {givenState.map(({ state }) => (\r\n                  <option value={state} key={state}>\r\n                    {state}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Local Government\">\r\n              <Select\r\n                placeholder=\"Local govt area\"\r\n                {...register(\"personLga\")}\r\n                disabled={!stateLGA}\r\n              >\r\n                {stateLGA &&\r\n                  stateLGA.lgas\r\n                    .sort((a, b) => (a > b ? 1 : -1))\r\n                    .map(lga => (\r\n                      <option value={lga.toLowerCase()} key={lga.toLowerCase()}>\r\n                        {lga}\r\n                      </option>\r\n                    ))}\r\n              </Select>\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"parentbox\">\r\n          <div>\r\n            <FormField label=\"Father's Name\">\r\n              <Input {...register(\"father\")} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Mother's Name\">\r\n              <Input {...register(\"mother\")} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Sibling's Name\">\r\n              <Input {...register(\"sibling\")} />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"parent_ad_box\">\r\n          <div>\r\n            <FormField label=\"Parent Address\">\r\n              <Input {...register(\"parentAd\")} />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n\r\n        {/**Missing or Found Details */}\r\n        <div>\r\n          {formType === \"found\" ? (\r\n            <h1>Found Details</h1>\r\n          ) : formType === \"missing\" ? (\r\n            <h1>Missing Details</h1>\r\n          ) : null}\r\n\r\n          <div className=\"issue_ad\">\r\n            <div>\r\n              <FormField label=\"Date\">\r\n                <Input type=\"date\" {...register(\"issueDate\")} />\r\n              </FormField>\r\n            </div>\r\n            <div>\r\n              <FormField label=\"State\">\r\n                <Select placeholder=\"Select State\" {...register(\"issueState\")}>\r\n                  {givenState.map(({ state }) => (\r\n                    <option value={state} key={state}>\r\n                      {state}\r\n                    </option>\r\n                  ))}\r\n                </Select>\r\n              </FormField>\r\n            </div>\r\n            <div>\r\n              <FormField label=\"Local Government\">\r\n                <Select\r\n                  placeholder=\"Local govt area\"\r\n                  {...register(\"issueLga\", { required: true })}\r\n                  disabled={!stateLGA}\r\n                >\r\n                  {stateLGA &&\r\n                    stateLGA.lgas\r\n                      .sort((a, b) => (a > b ? 1 : -1))\r\n                      .map(lga => (\r\n                        <option\r\n                          value={lga.toLowerCase()}\r\n                          key={lga.toLowerCase()}\r\n                        >\r\n                          {lga}\r\n                        </option>\r\n                      ))}\r\n                </Select>\r\n              </FormField>\r\n            </div>\r\n          </div>\r\n          <div className=\"parent_ad_box\">\r\n            <div>\r\n              <FormField\r\n                label={\r\n                  formType === \"missing\" ? `Last Seen Address` : `Found Address`\r\n                }\r\n              >\r\n                <Input {...register(\"issueAd\", { required: true })} />\r\n              </FormField>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"imgBoxWrap\">\r\n            <FormField label=\"Upload Images\">\r\n              <Input\r\n                type=\"file\"\r\n                multiple\r\n                accept=\"image/*\"\r\n                onChange={onImageChange}\r\n                className=\"uploadFile\"\r\n              />\r\n              <div style={{ display: \"flex\", gap: \"10px\", flexWrap: \"wrap\" }}>\r\n                {ImageURLs.map((itemSrc, index) => (\r\n                  <div key={index}>\r\n                    <img\r\n                      src={itemSrc}\r\n                      style={{\r\n                        display: \"inline-block\",\r\n                        border: \"1px solid\",\r\n                        width: \"100%\",\r\n                        height: \"250px\",\r\n                      }}\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n\r\n        {/**Police */}\r\n        <div>\r\n          <h1>Police Officer-in-charge</h1>\r\n        </div>\r\n        <div className=\"policebox\">\r\n          <div>\r\n            <FormField label=\"Police Officer Full Name\">\r\n              <Input {...register(\"poName\")} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"State of Police Station\">\r\n              <Select placeholder=\"Select State\" {...register(\"poState\")}>\r\n                {givenState.map(({ state }) => (\r\n                  <option value={state} key={state}>\r\n                    {state}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"LGA of Police Station\">\r\n              <Select\r\n                placeholder=\"Local govt area\"\r\n                {...register(\"poLga\")}\r\n                disabled={!stateLGA}\r\n              >\r\n                {stateLGA &&\r\n                  stateLGA.lgas\r\n                    .sort((a, b) => (a > b ? 1 : -1))\r\n                    .map(lga => (\r\n                      <option value={lga.toLowerCase()} key={lga.toLowerCase()}>\r\n                        {lga}\r\n                      </option>\r\n                    ))}\r\n              </Select>\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"police_ad_box\">\r\n          <div>\r\n            <FormField label=\"Police Station Address\">\r\n              <Input {...register(\"poAd\")} />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"police_nos\">\r\n          <div>\r\n            <FormField label=\"Case Number\">\r\n              <Input {...register(\"caseNumber\", { required: true })} />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Officer's Phone Number\">\r\n              <Input\r\n                placeholder=\"081xxxxxxxx\"\r\n                {...register(\"poNumber\", { maxLength: 11 })}\r\n              />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Station's Phone Number\">\r\n              <Input\r\n                placeholder=\"081xxxxxxxx\"\r\n                {...register(\"stationNumber\", { maxLength: 11 })}\r\n              />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"police_ad_box\">\r\n          <div>\r\n            <FormField label=\"Date Reported\">\r\n              <Input {...register(\"dateReport\")} />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n\r\n        {/**Posted By */}\r\n        <div>\r\n          <h1>Posted By</h1>\r\n        </div>\r\n        <div className=\"boxname\">\r\n          <div>\r\n            <FormField label=\"First Name\">\r\n              <Input\r\n                {...register(\"posterFirstName\")}\r\n                value={authUser?.user.firstName}\r\n                readOnly\r\n              />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Last Name\">\r\n              <Input\r\n                {...register(\"posterLastName\")}\r\n                value={authUser?.user.lastName}\r\n                readOnly\r\n              />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"Relationship\">\r\n              <Input {...register(\"posterRelationship\")} />\r\n            </FormField>\r\n          </div>\r\n        </div>\r\n        <div className=\"boxname\">\r\n          <div>\r\n            <FormField label=\"E-mail\">\r\n              <Input\r\n                {...register(\"posterEmail\", { required: true })}\r\n                value={authUser?.user?.email}\r\n                readOnly\r\n              />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <FormField label=\"OTP Number\">\r\n              <Input\r\n                {...register(\"posterOTP\", { required: true })}\r\n                maxLength={4}\r\n              />\r\n            </FormField>\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\" className=\"btn-otp\" onClick={handleOTP}>\r\n              {isLoading ? \"Sending OTP...\" : \"Send OTP\"}\r\n            </button>\r\n            <span className=\"numbaOTP\">\r\n              {isLoading ? <Spinner size=\"sm\" /> : `${arrivedOTP}`}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        {/**Payment*/}\r\n        <div className=\"payment\">\r\n          {formType === \"missing\" ? (\r\n            <p>\r\n              Kindly make payment to enable submission of form.\r\n              <span\r\n                onClick={() => {\r\n                  onOpen();\r\n                }}\r\n              >\r\n                Click to make payment.\r\n              </span>{\" \"}\r\n              The OTP button won't be clickable once you've otp generated except\r\n              the page is refreshed then it becomes clickable.\r\n            </p>\r\n          ) : formType === \"found\" ? (\r\n            <p className=\"warningotp\">\r\n              The OTP button won't be clickable once you've otp generated except\r\n              the page is refreshed then it becomes clickable.\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n\r\n        {/**Button*/}\r\n        <div className=\"btn\">\r\n          {formType === \"missing\" ? (\r\n            <>\r\n              <ButtonStyled disabled={btnCondition}>\r\n                {btnLoading ? \"Submiting\" : \"Submit\"}\r\n              </ButtonStyled>\r\n              <span>{btnLoading ? <Spinner size=\"sm\" /> : null}</span>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <ButtonStyled disabled={btnConditionB}>\r\n                {btnLoading ? \"Submiting\" : \"Submit\"}\r\n              </ButtonStyled>\r\n              <span>{btnLoading ? <Spinner size=\"sm\" /> : null}</span>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </FormAddBox>\r\n  );\r\n}\r\n\r\nexport default AddFormPage;\r\n","import styled from \"styled-components\";\r\n\r\nconst FormAddBox = styled.div`\r\n  padding: 15px;\r\n  .inputbox {\r\n    display: flex;\r\n  }\r\n\r\n  .boxname,\r\n  .personbox,\r\n  .dropbox,\r\n  .parentbox,\r\n  .issue_ad,\r\n  .policebox,\r\n  .police_nos,\r\n  .personbox,\r\n  .person_st_box {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    gap: 20px;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  label {\r\n    font-size: 15px;\r\n    margin-bottom: 3px;\r\n    color: var(--dark-primary);\r\n  }\r\n\r\n  h1 {\r\n    font-size: 20px;\r\n    margin-bottom: 17px;\r\n    margin-top: 28px;\r\n    border-bottom: 1px solid var(--dark-primary);\r\n  }\r\n\r\n  .person_ad_box,\r\n  .parent_ad_box,\r\n  .person_st_box,\r\n  .police_ad_box,\r\n  .person_type,\r\n  .person_st_box {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  Input,\r\n  Select {\r\n    border: 1px solid var(--dark-primary);\r\n    font-size: 13px;\r\n    color: var(--dark-primary);\r\n    &:hover {\r\n      border: 1px solid var(--dark-primary);\r\n    }\r\n  }\r\n\r\n  .uploadFile {\r\n    font-size: 16px;\r\n    width: 95%;\r\n    border: 5px solid;\r\n  }\r\n\r\n  .uploadFile :hover {\r\n    border: none;\r\n  }\r\n\r\n  .btn-otp {\r\n    padding: 9px;\r\n    margin-top: 26px;\r\n    font-size: 13px;\r\n    background-color: var(--dark-primary);\r\n    color: var(--neutral-light);\r\n    border-radius: 6px;\r\n  }\r\n\r\n  span {\r\n    margin-left: 9px;\r\n    margin-top: 21px;\r\n  }\r\n\r\n  .numbaOTP {\r\n    margin-top: 150px;\r\n    color: green;\r\n  }\r\n\r\n  Select option {\r\n    padding: 0px 5px;\r\n    background-color: var(--neutral-light);\r\n  }\r\n\r\n  .warningotp,\r\n  .payment p {\r\n    margin-top: 4px;\r\n    font-size: 12px;\r\n    font-style: italic;\r\n  }\r\n\r\n  .payment span {\r\n    text-decoration: underline;\r\n    color: blue;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .btn {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 25px;\r\n    span {\r\n      margin-left: 9px;\r\n      margin-top: 13px;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 425px) {\r\n    h1 {\r\n      font-size: 16px;\r\n      margin-bottom: 12px;\r\n      border-bottom: 1px solid var(--dark-primary);\r\n    }\r\n    .boxname,\r\n    .personbox,\r\n    .dropbox,\r\n    .parentbox,\r\n    .issue_ad,\r\n    .policebox,\r\n    .person_st_box,\r\n    .police_nos {\r\n      grid-template-columns: 1fr;\r\n      margin-bottom: 17px;\r\n    }\r\n\r\n    Input[type=\"submit\"] {\r\n      margin-top: -12px;\r\n      background-color: var(--dark-primary);\r\n      color: var(--neutral-light);\r\n      width: 23vw;\r\n    }\r\n\r\n    .btn-otp {\r\n      margin-top: 0px;\r\n    }\r\n  }\r\n`;\r\nexport default FormAddBox;\r\n\r\nexport const inputStyles = {\r\n  outline: \"none\",\r\n  focusBorderColor: \"none\",\r\n};\r\n\r\nexport const ButtonStyled = styled.button`\r\n  background-color: var(--dark-primary);\r\n  padding: 0.4rem 2rem;\r\n  color: white;\r\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\r\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\r\n  border-radius: 4px;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  font-size: 13px;\r\n  line-height: 1.75;\r\n  letter-spacing: 0.02857em;\r\n  text-transform: uppercase;\r\n  min-width: 64px;\r\n  margin-top: 20px;\r\n  &:disabled {\r\n    background-color: #cccccc;\r\n  }\r\n  @media screen and (max-width: 425px) {\r\n    padding: 0.5rem 1rem;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nexport const ModalWrapper = styled.div`\r\n  color: var(--dark-primary);\r\n  padding: 15px;\r\n  h1 {\r\n    text-align: center;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n  }\r\n  p {\r\n    font-size: 15px;\r\n    margin-bottom: 22px;\r\n  }\r\n\r\n  label {\r\n    font-size: 15px;\r\n    margin-bottom: 3px;\r\n    color: var(--dark-primary);\r\n  }\r\n\r\n  Input {\r\n    border: 1px solid var(--dark-primary);\r\n    font-size: 13px;\r\n    color: var(--dark-primary);\r\n    margin-bottom: 15px;\r\n    &:hover {\r\n      border: 1px solid var(--dark-primary);\r\n    }\r\n  }\r\n\r\n  .btn {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  .reset_btn {\r\n    outline: none;\r\n    padding: 8px 0;\r\n    background-color: var(--dark-primary);\r\n    color: white;\r\n    border-radius: 5px;\r\n    width: 100px;\r\n    font-weight: bold;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n"],"names":["skinColor","yup","firstName","required","lastName","age","gender","state","lga","hair","complexion","build","foundAd","missingAd","sort","a","b","foundInputValue","hairType","bodyType","formType","formData","register","btnLoading","isLoading","onOpen","onImageChange","ImageURLs","authUser","useContext","AuthContext","useState","arrivedOTP","setArrivedOTP","btnCondition","posterOTP","transaction","status","btnConditionB","stateLGA","dataNig","select","issueState","personSt","poState","givenState","useMutation","postRequest","onSuccess","res","toast","message","toastOptions","allowOTPCode","onError","err","mutate","className","FormField","label","placeholder","map","inputValue","value","color","ht","gh","disabled","lgas","toLowerCase","type","multiple","accept","onChange","style","display","gap","flexWrap","itemSrc","index","src","border","width","height","alt","maxLength","user","readOnly","email","onClick","phoneEmail","data","url","OTP_ROUTE","size","FormAddBox","styled","ButtonStyled","ModalWrapper"],"sourceRoot":""}